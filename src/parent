Makefile:AM_CFLAGS = -Wall -Wpointer-arith -Wstrict-prototypes -Wunused -O2 -g
Makefile.am:AM_CFLAGS = -Wall -Wpointer-arith -Wstrict-prototypes -Wunused -O2 -g
Makefile.in:AM_CFLAGS = -Wall -Wpointer-arith -Wstrict-prototypes -Wunused -O2 -g
event.c:					if(ev->subwindow == t->newcol) 
event.c:					else if(ev->subwindow == t->delcol) 
sublet.c:	int max = (l <= list->size && list->content[l]->time < list->content[pos]->time) ? l : pos;
sublet.c:	if(r <= list->size && list->content[r]->time < list->content[max]->time) max = r;
sublet.c:			SubSublet *tmp				= list->content[pos];
sublet.c:			list->content[pos]	= list->content[max];
sublet.c:			list->content[max]	= tmp;
sublet.c:	return(list->size > 0 ? list->content[1] : NULL);
sublet.c:	list->content = (SubSublet **)calloc(1, sizeof(SubSublet *));
sublet.c:	if(!list->content) subLogError("Can't alloc memory. Exhausted?\n");
sublet.c:	list->size = 1;
sublet.c:	list->content = (SubSublet **)realloc(list->content, sizeof(SubSublet *) * (list->size + 1));
sublet.c:	if(!list->content) subLogError("Can't alloc memory. Exhausted?\n");
sublet.c:	i = list->size;
sublet.c:	while(i > 1 && s->time > list->content[i / 2]->time)
sublet.c:			list->content[i] = list->content[i / 2];
sublet.c:	list->content[i] = s;
sublet.c:	for(i = 1; i < list->size; i++)
sublet.c:			XUnmapWindow(d->dpy, list->content[i]->win);
sublet.c:			XDeleteContext(d->dpy, list->content[i]->win, 3);
sublet.c:			XDestroyWindow(d->dpy, list->content[i]->win);
sublet.c:			free(list->content[i]);
Binary file subtle matches
tile.c:	t->newcol = XCreateSimpleWindow(d->dpy, w->frame, d->th, 0, 7 * d->fx, 
tile.c:	t->delcol	= XCreateSimpleWindow(d->dpy, w->frame, d->th + 7 * d->fx, 0,
tile.c:	t->mw = w->width;
tile.c:	t->mh = w->height;
tile.c:			if(t->parent) subTileConfigure(t->parent);
tile.c:			XSetWindowBackground(d->dpy, t->newcol, col);
tile.c:			XSetWindowBackground(d->dpy, t->delcol, col);
tile.c:			XClearWindow(d->dpy, t->newcol);
tile.c:			XClearWindow(d->dpy, t->delcol);
tile.c:			XDrawString(d->dpy, t->newcol, d->gcs.font, 3, d->fy - 1, "Newcol", 6);
tile.c:			XDrawString(d->dpy, t->delcol, d->gcs.font, 3, d->fy - 1, "Delcol", 6);
tile.c:	XReparentWindow(d->dpy, w->frame, t->win, 0, 0);
tile.c:			if(wt) wt->parent = t;
tile.c:					n			= n - t->shaded > 0 ? n - t->shaded : 1; /* Prevent divide by zero */
tile.c:					t->mw = (w->prop & SUB_WIN_TILEH) ? attr.width / n	: attr.width;
tile.c:					t->mh = (w->prop & SUB_WIN_TILEH) ? attr.height	: (attr.height - t->shaded * d->th) / n;
tile.c:			for(i = 0; i < n + t->shaded; i++)
tile.c:									c->y = (w->prop & SUB_WIN_TILEH) ? 0 : (n * t->mh) + (s++ * d->th);
tile.c:									c->y = (w->prop & SUB_WIN_TILEH) ? 0 : (i - s) * t->mh;
tile.c:							c->height = (w->prop & SUB_WIN_TILEV && i == n - 1) ? t->mh - t->shaded * d->th + abs(n * t->mh - attr.height) : t->mh;
tile.c:							c->width	= (w->prop & SUB_WIN_TILEH && i == n - 1) ? t->mw + abs(n * t->mw - attr.width) : t->mw;
tile.c:							c->x			= (w->prop & SUB_WIN_TILEH) ? i * t->mw : 0;
tile.c:			if(t->shaded != s)
tile.c:					subLogDebug("Weird. Found %d shaded windows - but expected %d!\n", s, t->shaded);
tile.c:					t->shaded = s;
tile.c:	subLogDebug("Configuring %s-tile: n=%d, mw=%d, mh=%d\n", (w->prop & SUB_WIN_TILEH) ? "h" : "v", n, t->mw, t->mh);
win.c:					(t->shaded)--;
win.c:					(t->shaded)++;
